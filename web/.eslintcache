[{"/Users/kevin/Code/TrenDuk/web/src/index.tsx":"1","/Users/kevin/Code/TrenDuk/web/src/reportWebVitals.ts":"2","/Users/kevin/Code/TrenDuk/web/src/App.tsx":"3","/Users/kevin/Code/TrenDuk/web/src/cache/index.ts":"4","/Users/kevin/Code/TrenDuk/web/src/components/header.tsx":"5","/Users/kevin/Code/TrenDuk/web/src/components/board.tsx":"6","/Users/kevin/Code/TrenDuk/web/src/components/stat.tsx":"7","/Users/kevin/Code/TrenDuk/web/src/cache/state/reducers.ts":"8","/Users/kevin/Code/TrenDuk/web/src/cache/gibo/reducers.ts":"9","/Users/kevin/Code/TrenDuk/web/src/cache/node/reducers.ts":"10","/Users/kevin/Code/TrenDuk/web/src/api/getGibos.ts":"11","/Users/kevin/Code/TrenDuk/web/src/api/getBranches.ts":"12","/Users/kevin/Code/TrenDuk/web/src/cache/gibo/types.ts":"13","/Users/kevin/Code/TrenDuk/web/src/cache/state/types.ts":"14","/Users/kevin/Code/TrenDuk/web/src/cache/node/types.ts":"15"},{"size":635,"mtime":1608277984027,"results":"16","hashOfConfig":"17"},{"size":426,"mtime":1608277984027,"results":"18","hashOfConfig":"17"},{"size":994,"mtime":1608277984020,"results":"19","hashOfConfig":"17"},{"size":701,"mtime":1608277984023,"results":"20","hashOfConfig":"17"},{"size":534,"mtime":1608277984026,"results":"21","hashOfConfig":"17"},{"size":3317,"mtime":1608277984026,"results":"22","hashOfConfig":"17"},{"size":4031,"mtime":1608277984026,"results":"23","hashOfConfig":"17"},{"size":854,"mtime":1608277984025,"results":"24","hashOfConfig":"17"},{"size":422,"mtime":1608277984022,"results":"25","hashOfConfig":"17"},{"size":706,"mtime":1608277984024,"results":"26","hashOfConfig":"17"},{"size":803,"mtime":1608277984021,"results":"27","hashOfConfig":"17"},{"size":945,"mtime":1608277984020,"results":"28","hashOfConfig":"17"},{"size":259,"mtime":1608277984022,"results":"29","hashOfConfig":"17"},{"size":455,"mtime":1608277984025,"results":"30","hashOfConfig":"17"},{"size":567,"mtime":1608277984024,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1mkevu9",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/kevin/Code/TrenDuk/web/src/index.tsx",[],["65","66"],"/Users/kevin/Code/TrenDuk/web/src/reportWebVitals.ts",[],"/Users/kevin/Code/TrenDuk/web/src/App.tsx",[],"/Users/kevin/Code/TrenDuk/web/src/cache/index.ts",[],"/Users/kevin/Code/TrenDuk/web/src/components/header.tsx",[],"/Users/kevin/Code/TrenDuk/web/src/components/board.tsx",["67"],"// library imports\nimport React, { useEffect } from \"react\";\nimport { useSelector, shallowEqual, useDispatch } from \"react-redux\";\nimport { Radio } from \"antd\";\n\n// local imports\nimport { getBranches } from \"../api/getBranches\";\nimport { getGibos } from \"../api/getGibos\";\nimport { RootState } from \"../cache\";\nimport { INode } from \"../types\";\n\ndeclare const window: any;\n\nexport const Board = () => {\n  const {\n    blackBranchNodes,\n    whiteBranchNodes,\n    selectedNodes,\n    selectedColor,\n  } = useSelector(\n    (state: RootState) => ({\n      blackBranchNodes: state.node.blackBranchNodes,\n      whiteBranchNodes: state.node.whiteBranchNodes,\n      selectedNodes: state.state.selectedNodes,\n      selectedColor: state.state.selectedColor,\n    }),\n    shallowEqual\n  );\n\n  const dispatch = useDispatch();\n\n  // Wait for API request - API request when render\n  useEffect(() => {\n    getBranches();\n  }, []);\n\n  // Rendering board\n  useEffect(() => {\n    renderBoard();\n    return () => {\n      let boardElement: HTMLElement = document.getElementById(\n        \"wgoboard\"\n      ) as HTMLElement;\n      boardElement.innerHTML = \"\";\n    };\n  }, [selectedColor, selectedNodes, blackBranchNodes, whiteBranchNodes]);\n\n  const renderBoard = () => {\n    var board = new window.WGo.Board(document.getElementById(\"wgoboard\"), {\n      width: 500,\n      section: {\n        top: 0,\n        left: 9,\n        right: 0,\n        bottom: 9,\n      },\n    });\n\n    let boardElement: HTMLElement = document.getElementById(\n      \"wgoboard\"\n    ) as HTMLElement;\n\n    boardElement.style.margin = \"0\";\n\n    var branchNodes: Array<INode>;\n    if (selectedColor === \"B\") {\n      branchNodes = blackBranchNodes;\n    } else {\n      branchNodes = whiteBranchNodes;\n    }\n\n    // add labels\n    branchNodes.forEach((node) => {\n      board.addObject({\n        x: node.move[0].charCodeAt(0) - 97,\n        y: node.move[1].charCodeAt(0) - 97,\n        type: \"LB\",\n        text: node.move,\n      });\n    });\n\n    // add already selected stones\n    selectedNodes.forEach((node) => {\n      board.addObject({\n        x: node.move[0].charCodeAt(0) - 97,\n        y: node.move[1].charCodeAt(0) - 97,\n        c: node.color === \"B\" ? window.WGo.B : window.WGo.W,\n      });\n    });\n\n    board.addEventListener(\"click\", function (x: number, y: number) {\n      const branchNodes =\n        selectedColor === \"B\" ? blackBranchNodes : whiteBranchNodes;\n\n      for (var i = 0; i < branchNodes.length; i++) {\n        if (\n          branchNodes[i].move[0].charCodeAt(0) - 97 === x &&\n          branchNodes[i].move[1].charCodeAt(0) - 97 === y\n        ) {\n          getBranches(branchNodes[i]._id);\n          getGibos(branchNodes[i]._id);\n          dispatch({ type: \"SELECT_NODE\", payload: branchNodes[i] });\n          dispatch({ type: \"SELECT_COLOR\" });\n        }\n      }\n    });\n  };\n\n  return (\n    <div style={{ display: \"table-cell\", verticalAlign: \"middle\" }}>\n      <div\n        style={{ height: \"80%\", width: \"80%\", padding: \"0 0 10px\" }}\n        id=\"wgoboard\"\n      ></div>\n      <Radio.Group\n        value={selectedColor}\n        onChange={() => dispatch({ type: \"SELECT_COLOR\" })}\n        size=\"middle\"\n      >\n        <Radio.Button value=\"B\">Black</Radio.Button>\n        <Radio.Button value=\"W\">White</Radio.Button>\n      </Radio.Group>\n    </div>\n  );\n};\n","/Users/kevin/Code/TrenDuk/web/src/components/stat.tsx",[],"/Users/kevin/Code/TrenDuk/web/src/cache/state/reducers.ts",[],"/Users/kevin/Code/TrenDuk/web/src/cache/gibo/reducers.ts",[],"/Users/kevin/Code/TrenDuk/web/src/cache/node/reducers.ts",[],"/Users/kevin/Code/TrenDuk/web/src/api/getGibos.ts",[],"/Users/kevin/Code/TrenDuk/web/src/api/getBranches.ts",[],"/Users/kevin/Code/TrenDuk/web/src/cache/gibo/types.ts",[],"/Users/kevin/Code/TrenDuk/web/src/cache/state/types.ts",[],["68","69"],"/Users/kevin/Code/TrenDuk/web/src/cache/node/types.ts",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":46,"column":6,"nodeType":"76","endLine":46,"endColumn":72,"suggestions":"77"},{"ruleId":"70","replacedBy":"78"},{"ruleId":"72","replacedBy":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'renderBoard'. Either include it or remove the dependency array.","ArrayExpression",["82"],["80"],["81"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [selectedColor, selectedNodes, blackBranchNodes, whiteBranchNodes, renderBoard]",{"range":"85","text":"86"},[1145,1211],"[selectedColor, selectedNodes, blackBranchNodes, whiteBranchNodes, renderBoard]"]